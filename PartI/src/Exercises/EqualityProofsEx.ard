\import Case (pred)
\import EqualityProofs
\import Exercises.EqualityEx (zero/=suc)
\import Proofs (absurd)

-- 1. The operator 'J' has a different form, which we denote 'Jalt'. Prove that 'J' and 'Jalt' are equivalent, i.e.
-- define 'J' in terms of 'Jalt' and vice versa.

-- Define 'Jalt' via 'J'. You can use only 'J', 'idp' and everything definable in terms of these constructs.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p =>
  J (B a) (b a) p

-- Define 'J' via 'Jalt'. You can use only 'Jalt', 'idp' and everything definable in terms of these constructs (but not pattern matching on 'idp').
-- See the end of this file for a hint.

--- Jian: for comparing, i want to define transport by J firstly.
\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  J (\lam x p => B x) b p

-- I GET INSPIRED BY THIS!!!!!!!! THANK U!
\func coe' {A B : \Type} (p : A = B) (a : A) : B =>
  (Jalt (\lam A B p => \Pi A -> B) (\lam A a => a) p) a

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  (Jalt (\lam a a' p => \Pi (B a) -> B a') (\lam T x => x) p) b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a,idp) = {\Sigma (x : A) (a = x)} p =>
  Jalt {A} (\lam a a' p => (a,idp) = {\Sigma (x : A) (a = x)} (a', p)) (\lam a => idp {\Sigma (x : A) (a = x)} {(a, idp)}) {a} {p.1} p.2

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p =>
  transport' (\lam pr => B pr.1 pr.2) (sigma-contr (a', p)) b

-- 2. Prove that 'vnil' is an identity for 'v++'.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons a xs =>
    lemma a xs *> pmap (vcons a) (vnil-rightId xs)
  \where {
    \func lemma {A : \Type} {n : Nat} (a : A) (xs : Vec A n) :
      transport (Vec A) (pmap suc (+-comm 0 n)) (vcons a (xs v++ vnil)) = vcons a (transport (Vec A) (+-comm 0 n) (xs v++ vnil)) =>
      J (\lam n p => transport (Vec A) (pmap suc p) (vcons a (xs v++ vnil)) = vcons a (transport (Vec A) p (xs v++ vnil)))
        idp (+-comm 0 n)
      -- We use J operator to make transport can be evaluated by computation rule at idp.
  }

-- 3. Prove that all definitions of <= given in the module are equivalent.
--- lessOrEq, LessOrEq, LessOrEq''', LessOrEq'', LessOrEq'
--- For the convinience, we name them as 1, 2, 3, 4, 5.

\func P1->P2 {n m : Nat} (p : lessOrEq n m) : LessOrEq n m \elim n, m, p
  | 0, _, unit => z<=n
  | suc n, suc m, p => s<=s (P1->P2 p)

\func P2->P3 {n m : Nat} (p : LessOrEq n m) : LessOrEq''' n m \elim n, m, p
  | 0, m, z<=n => (m, idp)
  | suc n, suc m, s<=s p => \let ind => P2->P3 p \in (ind.1, pmap suc ind.2)

\func P3->P4 {n m : Nat} (p : LessOrEq''' n m) : LessOrEq'' n m =>
  help (transport (\lam x => x = m) (+-comm p.1 n) p.2)
  \where {
    \func help {n m t : Nat} : (n + t = m) -> LessOrEq'' n m \elim m, t
      | _, 0 => <=-refl
      | 0, suc t => \lam p => \case (zero/=suc (n + t) (inv p))
      | suc m, suc t => \lam p => <=-step (help (pmap pred p))
  }

\func P4->P3 {n m : Nat} (p : LessOrEq'' n m) : LessOrEq''' n m \elim n, m, p
  | n, suc m, <=-step p => \let ind => P4->P3 p \in (suc ind.1, transport (\lam x => x = suc m) suc-a+b (pmap suc ind.2))
  | n, m, <=-refl p => (0, transport (\lam x => x = m) (inv zero-+-n) p)
  \where {
    \func zero-+-n {n : Nat} : 0 + n = n \elim n
      | 0 => idp
      | suc n => pmap suc zero-+-n
    \func suc-a+b {a b : Nat} : suc (a + b) = suc a + b \elim b
      | 0 => idp
      | suc a => pmap suc suc-a+b
  }

\func P3->P5 {n m : Nat} (p : LessOrEq''' n m) : LessOrEq' n m \elim n, m
  | 0, _ => z<=n' idp
  | suc n, 0 => \case zero/=suc (p.1 + n) (inv p.2)
  | suc n, suc m => s<=s' idp idp (P3->P5 (p.1, pmap pred p.2))

\func P5->P1 {n m : Nat} (p : LessOrEq' n m) : lessOrEq n m \elim n, m, p
  | 0, _, _ => unit
  | suc n, _, z<=n' p => \case zero/=suc n (inv p)
  | suc n, 0, s<=s' p1 p2 p => \case zero/=suc _ p2
  | suc n, suc m, s<=s' {n'} {m'} p1 p2 p => P5->P1 (transport (\lam x => LessOrEq' n x) (inv (pmap pred p2))
                                                    (transport (\lam x => LessOrEq' x m') (inv (pmap pred p1)) p))

-- 4. Define the membership predicate 'In' for lists.

\data List (A : \Type) | nil | cons A (List A)

\data In {A : \Type} (a : A) (xs : List A)

-- 5. Define reflexive and transitive closure of a relation.
--    That is 'ReflTransClosure R' -- is the minimal reflexive and transitive relation containing R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)

-- 6. Prove that if 'R' is already reflexive and transitive then 'ReflTransClosure R' is equivalent to 'R'.

\func \infix 4 <-> {A : \Type} (P Q : A -> A -> \Type) => \Pi (x y : A) -> \Sigma (P x y -> Q x y) (Q x y -> P x y)

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z) : R <-> ReflTransClosure R => {?}

-- 7. Define the predicate xs <= ys for lists, which says "the list xs is a sublist of ys".

-- 8. Prove that 'filter xs <= xs' for any list xs.












-- Hint for the exercise 1:
-- 1. Define 'transport' via 'Jalt'.
-- 2. Prove that the type \Sigma (x : A) (a = x) is one-element type, that is for all p : \Sigma (x : A) (a = x) holds (x,idp) = p.
-- 3. Use this to define 'J'.
