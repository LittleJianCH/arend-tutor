\import Indexed

-- 1. Implement the function 'lookup', which takes a list and a natural number n and returns the n-th element in the list.
--    Note that it is impossible to define such a function without restrictions on n sice n can be greater than the size of the list.
--    Therefore the function should also take a proof that n is in the right range: T (n < length xs).

\func list-len {A : \Type} (xs : List A) : Nat \elim xs
  | nil => 0
  | cons a xs => suc (list-len xs)

\func lookup {A : \Type} (xs : List A) (n : Nat) (proof : T (n < list-len xs)) : A \elim xs, n, proof
  -- It's very cool that Arend can figure out there's only three branches
  | nil, 0, ()
  | cons a xs, 0, proof => a
  | cons a xs, suc n, proof => lookup xs n proof

-- 2. Implement function replicate for 'vec' and 'Vec' (this function creates the list of a given length filled with a
-- given element).

\func replicate-vec {A : \Type} (a : A) (n : Nat) : vec A n \elim n
  | 0 => ()
  | suc n => (a, replicate-vec a n)

\func replicate-Vec {A : \Type} (a : A) (n : Nat) : Vec A n \elim n
  | 0 => fnil
  | suc n => fcons a (replicate-Vec a n)

-- 3. Implement function 'map' for 'vec' and 'Vec'.

\func map-vec {A B : \Type} {n : Nat} (f : A -> B) (v : vec A n) : vec B n \elim n
  | 0 => ()
  | suc n => (f v.1, map-vec f v.2)

\func map-Vec {A B : \Type} {n : Nat} (f : A -> B) (v : Vec A n) : Vec B n \elim n, v
  | 0, fnil => fnil
  | suc n, fcons a v => fcons (f a) (map-Vec f v)

-- 4. Implement function 'zipWith' for 'vec' and 'Vec'.
--    The function must take lists of equal lengths.

\func zipWith-vec {A B C : \Type} {n : Nat} (f : A -> B -> C) (v : vec A n) (w : vec B n) : vec C n \elim n
  | 0 => ()
  | suc n => (f v.1 w.1, zipWith-vec f v.2 w.2)

\func zipWith-Vec {A B C : \Type} {n : Nat} (f : A -> B -> C) (v : Vec A n) (w : Vec B n) : Vec C n \elim n, v, w
    | 0, fnil, fnil => fnil
    | suc n, fcons a v, fcons b w => fcons (f a b) (zipWith-Vec f v w)

-- 5. Functions Fin n -> A correspond to lists of length n with elements in A.
--    Implement the function that converts an element of Fin n -> A to element of Vec A n.

\func funToVec {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => fnil
  | suc n => fcons (f fzero) (funToVec (\lam n => f (fsuc n)))

-- 6. Define the type of matrices and a number of functions for them:

\func Mat (A : \Type) (n m : Nat) : \Type =>
  Vec (Vec A n) m

-- diagonal matrix with elements e on the diagonal and z at all other positions.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n =>
  map-Vec iter (funToVec id)
  \where {
    \func id {T : \Type} (x : T) : T => x
    \func iter {m : Nat} (i : Fin m) : Vec A m \elim m, i
      | suc m1, fzero => fcons e (replicate-Vec z m1)
      | suc m1, fsuc i1 => fcons z (iter i1)
  }


-- transposition

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim m, M
  | 0, fnil => replicate-Vec fnil n
  | suc m, fcons a v => zipWith-Vec fcons a (transpose v)

-- addition

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m =>
  zipWith-Vec (zipWith-Vec add) M N

-- multiplication

-- z is neutral under addition.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k =>
    map-Vec (\lam v => map-Vec (\lam w => sum (zipWith-Vec mul v w)) (transpose M)) N
    \where {
      \func sum {n : Nat} (v : Vec A n) : A \elim n, v
        | 0, fnil => z
        | suc n1, fcons a v => add a (sum v)
    }


-- 7. Define the type CTree A n of (complete and full) binary trees of height precisely n, which store elements in internal nodes, but not in leaves.
--    The height of a leaf is 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => CLeaf
  | suc n => CNode (CTree A n) (CTree A n)

-- 8. Define the type Tree A n of binary trees of height at most n, which store elements in internal nodes, but not in leaves.
--    The height of a leaf is 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | suc n => {Leaf | Node (Tree A n) (Tree A n)}

-- Define the function that computes the height of a tree.

\func height {A : \Type} {n : Nat} (t : Tree A n) : Fin (suc n) \elim n, t
  | suc n, Leaf => fzero
  | suc n, Node t1 t2 => fsuc (fmax (height t1) (height t2))
  \where {
    \func fmax {n : Nat} (a b : Fin n) : Fin n \elim n, a, b
      | suc n, fzero, b => b
      | suc n, a, fzero => a
      | suc n, fsuc a, fsuc b => fsuc (fmax a b)
  }
